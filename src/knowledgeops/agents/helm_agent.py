# src/knowledgeops/agents/helm_agent.py

import os
from typing import Dict
from knowledgeops.storage.vector_store import VectorStore
from knowledgeops.llm.groq_client import GroqLLM
from knowledgeops.connectors.github_ingestor import GitHubIngestor
from knowledgeops.connectors.confluence import ConfluenceIngestor


class HelmAgent:
    """
    Agent that reads RAG context + repo context,
    generates Helm chart actions, and creates PRs.
    """

    def __init__(self):
        self.vector_store = VectorStore()
        self.llm = GroqLLM()
        self.github = GitHubIngestor()
        self.confluence = ConfluenceIngestor()

    def retrieve_context(self, query: str, top_k: int = 5) -> str:
        return self.vector_store.query(query)

    def plan_action(
        self,
        query: str,
        repo: str = None,
        base_branch: str = "main",
        include_context: bool = True,
    ) -> str:
        """
        Create a Helm chart generation/modification plan using both:
        - Vector store context (Confluence/GitHub ingested docs)
        - Repo context (existing Helm files, if repo provided)
        """
        rag_context = self.retrieve_context(query) if include_context else ""

        repo_context = ""
        if repo:
            helm_files = self.github.fetch_files(
                repo, base_branch, extensions=[".yaml", ".yml"]
            )
            if helm_files:
                repo_context = "\n\n".join(
                    [f["path"] + ":\n" + f["content"] for f in helm_files]
                )
            else:
                repo_context = "No Helm YAML files found. Use scaffold."

        prompt = f"""
        You are an AI DevOps assistant.
        User asked: {query}

        Repo context:
        {repo_context}

        Knowledge context:
        {rag_context}

        Respond with:
        - Helm chart YAML or modifications required
        - Step-by-step reasoning if changes are needed
        """

        return self.llm.query(query, prompt)

    def execute_plan(
        self,
        query: str,
        repo: str,
        base_branch: str = "main",
        dry_run: bool = True,
    ) -> Dict:
        """
        Execute Helm chart generation + PR creation.
        """
        # Step 1: Get full plan
        plan = self.plan_action(query, repo=repo, base_branch=base_branch)

        # Step 2: Generate actual Helm chart YAML
        new_chart = self.llm.query(
            query,
            f"Based on this plan:\n{plan}\n\nGenerate final Helm YAML for: {query}",
        )

        if dry_run:
            return {"plan": plan, "helm_chart": new_chart, "dry_run": True}

        # Step 3: Create new branch + commit
        new_branch = f"helm-{query.replace(' ', '-')}"
        self.github.create_branch(repo, base_branch, new_branch)
        self.github.commit_file(
            repo,
            new_branch,
            f"charts/{query}/values.yaml",
            new_chart,
            f"Add Helm chart for {query}",
        )

        # Step 4: Open PR
        pr = self.github.create_pr(
            repo,
            head_branch=new_branch,
            base_branch=base_branch,
            title=f"Helm chart for {query}",
            body="Generated by HelmAgent. Please review.",
        )

        return {
            "plan": plan,
            "helm_chart": new_chart,
            "pr_url": pr.get("html_url"),
        }
