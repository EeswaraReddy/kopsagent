# src/knowledgeops/agents/devops_agent.py

import os
from typing import Dict
from knowledgeops.storage.vector_store import VectorStore
from knowledgeops.llm.groq_client import GroqLLM
from knowledgeops.connectors.github_ingestor import GitHubIngestor
from knowledgeops.connectors.confluence import ConfluenceIngestor


class HelmAgent:
    """
    Generic DevOps assistant that reads RAG context + repo context,
    generates DevOps-related outputs (Terraform, Helm, scripts, etc.),
    and optionally creates PRs.
    """

    def __init__(self):
        self.vector_store = VectorStore()
        self.llm = GroqLLM()
        self.github = GitHubIngestor()
        self.confluence = ConfluenceIngestor()

    def retrieve_context(self, query: str, top_k: int = 5) -> str:
        """
        Query the vector store to get RAG context.
        """
        return self.vector_store.query(query)

    def plan_action(
        self,
        query: str,
        repo: str = None,
        base_branch: str = "main",
        include_context: bool = True,
    ) -> str:
        """
        Create a DevOps plan using:
        - Vector store context (Confluence/GitHub ingested docs)
        - Repo context (existing files, if repo provided)
        """
        rag_context = self.retrieve_context(query) if include_context else ""

        repo_context = ""
        if repo:
            devops_files = self.github.fetch_files(
                repo, base_branch, extensions=[".tf", ".yaml", ".yml", ".sh"]
            )
            if devops_files:
                repo_context = "\n\n".join(
                    [f["path"] + ":\n" + f["content"] for f in devops_files]
                )
            else:
                repo_context = "No DevOps files found in repo."

        prompt = f"""
        You are an AI DevOps assistant.
        User asked: {query}

        Repo context:
        {repo_context}

        Knowledge context:
        {rag_context}

        Respond with:
        - DevOps-related code, scripts, or configuration
        - Step-by-step reasoning for any changes needed
        - Make output copy-paste ready
        """

        return self.llm.query(query, prompt)

    def execute_plan(
        self,
        query: str,
        repo: str = None,
        base_branch: str = "main",
        dry_run: bool = True,
        file_path: str = "devops/output.txt",
    ) -> Dict:
        """
        Execute DevOps plan and optionally create PRs.
        """
        # Step 1: Get full plan / recommendation
        plan = self.plan_action(query, repo=repo, base_branch=base_branch)

        # Step 2: Generate actual code/scripts/config
        devops_output = self.llm.query(
            query,
            f"Based on this plan:\n{plan}\n\nGenerate final DevOps code or scripts for: {query}",
        )

        if dry_run:
            return {"plan": plan, "devops_output": devops_output, "dry_run": True}

        if repo:
            # Step 3: Create branch + commit
            new_branch = f"devops-{query.replace(' ', '-')}"
            self.github.create_branch(repo, base_branch, new_branch)
            self.github.commit_file(
                repo,
                new_branch,
                file_path,
                devops_output,
                f"Add DevOps output for {query}",
            )

            # Step 4: Open PR
            pr = self.github.create_pr(
                repo,
                head_branch=new_branch,
                base_branch=base_branch,
                title=f"DevOps output for {query}",
                body="Generated by DevOpsAssistant. Please review.",
            )

            return {
                "plan": plan,
                "devops_output": devops_output,
                "pr_url": pr.get("html_url"),
            }

        return {"plan": plan, "devops_output": devops_output}
