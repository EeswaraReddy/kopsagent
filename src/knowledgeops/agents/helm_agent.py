import os
from typing import Dict
from knowledgeops.storage.vector_store import VectorStore
from knowledgeops.llm.groq_client import GroqLLM
from knowledgeops.connectors.github import GitHubIngestor
from knowledgeops.connectors.confluence import ConfluenceIngestor

class HelmAgent:
    """
    Agent that reads RAG context, generates Helm chart actions, and creates PRs.
    """

    def __init__(self):
        self.vector_store = VectorStore()
        self.llm = GroqLLM()
        self.github = GitHubIngestor()
        self.confluence = ConfluenceIngestor()

    def retrieve_context(self, query: str, top_k: int = 5) -> str:
        return self.vector_store.query(query)

    def plan_action(self, query: str, include_context=True) -> str:
        context = self.retrieve_context(query) if include_context else ""
        prompt = f"""
        You are an AI DevOps assistant.
        User asked: {query}
        Use the context below to generate Helm chart YAML if needed, based on repo style.
        Context:
        {context}

        Respond with Helm chart YAML or modifications required.
        """
        return self.llm.query(query, prompt)

    def execute_plan(self, query: str, repo: str, base_branch="main", dry_run=True) -> Dict:
        """
        Execute Helm chart generation + PR creation.
        """
        # Step 1: Plan with LLM
        plan = self.plan_action(query)

        # Step 2: Fetch repo context
        helm_files = self.github.fetch_files(repo, base_branch, extensions=[".yaml", ".yml"])

        # Step 3: Generate chart proposal
        if helm_files:
            repo_context = "\n\n".join([f["path"] + ":\n" + f["content"] for f in helm_files])
        else:
            repo_context = "No Helm files found. Use scaffold."

        new_chart = self.llm.query(
            query,
            f"Repo context:\n{repo_context}\n\nGenerate Helm YAML for: {query}"
        )

        if dry_run:
            return {"plan": plan, "helm_chart": new_chart, "dry_run": True}

        # Step 4: Create new branch + commit
        new_branch = f"helm-{query.replace(' ', '-')}"
        self.github.create_branch(repo, base_branch, new_branch)
        self.github.commit_file(
            repo,
            new_branch,
            f"charts/{query}/values.yaml",
            new_chart,
            f"Add Helm chart for {query}"
        )

        # Step 5: Open PR
        pr = self.github.create_pr(
            repo,
            new_branch,
            base_branch,
            title=f"Helm chart for {query}",
            body="Generated by HelmAgent. Please review."
        )

        return {"plan": plan, "helm_chart": new_chart, "pr_url": pr.get("html_url")}
